import pandas as pd
import numpy as np
# Basic Visulaization - Bar, Line, Scatter, Pie, Histogram
import matplotlib.pyplot as plt
# Visualization - Distribution Plot, Density, Boxplot, etc.
import seaborn as sns

boston_df = pd.read_csv('https://raw.githubusercontent.com/ammishra08/MachineLearning/master/Datasets/Boston.csv')

boston_df.head()

boston_df.drop(['Unnamed: 0'], axis = 1, inplace = True)

plt.figure(figsize = (11,7))
plt.plot(boston_df['age'].sort_values().unique(), color='darkviolet')
plt.title('Line Plot of Age', fontsize = 10)
plt.xlabel("Row Indexes")
plt.ylabel("AGE")
plt.show()

plt.figure(figsize=(20,9))
plt.plot(boston_df['age'])
plt.title('Line Plot of Age', fontsize = 10)
plt.xlabel("Row Indexes")
plt.ylabel("AGE")
plt.show()

 

plt.figure(figsize=(13,8))
plt.hist(boston_df['medv'], bins = 15)
plt.title('Histogram Plot')
plt.xlabel('MEDV')
plt.ylabel('Frequency in Range')
plt.show()

---------------------------------------------------------------------

from skimage import io
from skimage import viewer 

# Read the image
image = io.imread('/content/pizza.jpg')

# Colors are b/w 0-255
image

ax = plt.figure(figsize = (12,8))
# Ravel() - flatten the image array data 
ax = plt.hist(image.ravel(), bins = 256)
plt.show()

plt.figure(figsize = (20,12))
plt.hist(image.ravel(), bins = 256, color = 'gray', alpha = 0.5)
plt.hist(image[:, : , 0].ravel(), bins = 256, color = 'red', alpha = 0.6)
plt.hist(image[:, : , 1].ravel(), bins = 256, color = 'green', alpha = 0.5)
plt.hist(image[:, : , 2].ravel(), bins = 256, color = 'blue', alpha = 0.5)
plt.show()

iris_df = pd.read_csv('https://raw.githubusercontent.com/ammishra08/MachineLearning/master/Datasets/iris.csv',header = 0, sep = ',')
iris_df

plt.figure(figsize = (13,8))
plt.scatter(x = iris_df['sepal_length'], y = iris_df['petal_length'], s = 60)
plt.title('Scatter Plot', fontsize = 10)
plt.xlabel('Sepal Length')
plt.ylabel('Petal Length')
plt.show()

sns.set_style('whitegrid')
plt.figure(figsize = (13,8))
# s = 60 (size of the bubble)
plt.scatter(x = iris_df['sepal_length'], y = iris_df['petal_length'], c = 'deeppink', marker = '^', s = 60)
plt.scatter(x = iris_df['sepal_length'], y = iris_df['petal_width'], c = 'deepskyblue', marker = 's', s = 60)
plt.title('Scatter Plot', fontsize = 10)
plt.xlabel('Sepal Length')
plt.ylabel('Petal Length / Petal Width')
plt.show()


sns.set_style('whitegrid')
plt.figure(figsize = (13,8))
# s = 60 (size of the bubble)
plt.scatter(x = iris_df['sepal_length'], y = iris_df['petal_length'], c = 'deeppink', marker = '^', s = 60, label = 'petal length')
plt.scatter(x = iris_df['sepal_length'], y = iris_df['petal_width'], c = 'deepskyblue', marker = 's', s = 60, label = 'petal width')
plt.title('Scatter Plot', fontsize = 10)
plt.xlabel('Sepal Length')
plt.ylabel('Petal Length / Petal Width')
plt.legend(loc = 6)
plt.show()

-----------------------------------------------------------------------------

sns.set_style('whitegrid')
plt.figure(figsize = (13,8))
sns.scatterplot(x = 'sepal_length', y = 'petal_length', data = iris_df, hue = 'species', palette = 'plasma')

iris_df['species'].value_counts()

plt.figure(figsize = (8,8))
plt.pie(iris_df['species'].value_counts(), autopct='%0.2f%%', labels = iris_df['species'].unique(),
        explode = (0.1, 0, 0))
plt.show()
_____________________________________________

plt.style.use('ggplot')
plt.figure(figsize = (12,8))
sns.distplot(boston_df['medv'], bins = 15, color = 'blue')
plt.show()

plt.style.use('ggplot')
plt.figure(figsize = (12,8))
sns.distplot(boston_df['age'], bins = 15, color = 'magenta')
plt.show()

plt.figure(figsize = (12,3))
sns.boxplot(data = boston_df['age'], orient = 'h')

plt.style.use('ggplot')
plt.figure(figsize = (12,7))
sns.boxplot(data = iris_df, orient = 'h')
 
 plt.style.use('ggplot')
plt.figure(figsize = (20,9))
sns.boxplot(data = boston_df)

fig = plt.figure(figsize = (20,7))
# add subplot(1,3,1) = 1 Num of Rows, 3: Num of Columns, 1:First Index Position
ax1 = fig.add_subplot(1, 3, 1)
sns.scatterplot(x = boston_df['rm'], y = boston_df['medv'], color = 'm')
ax2 = fig.add_subplot(1, 3, 2)
sns.scatterplot(x = boston_df['ptratio'], y = boston_df['medv'], color = 'c')
ax3 = fig.add_subplot(1, 3, 3)
sns.scatterplot(x = boston_df['dis'], y = boston_df['medv'], color = 'k')
plt.savefig('/content/subplot.jpg')

# Corr = (-1,1)
boston_df.corr()


plt.figure(figsize = (14,9))
sns.heatmap(boston_df.corr(), annot = True, cmap = 'magma')
